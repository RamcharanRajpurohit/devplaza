// import app from './app';
// import { Request, Response } from 'express';

// app.get('/', (req: Request, res: Response) => {
//   res.send('Hello World!');
// });


// ============================
// 1. DEPENDENCIES AND IMPORTS
// ============================

const express = require('express');
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const cors = require('cors');
const nodemailer = require('nodemailer');
const rateLimit = require('express-rate-limit');
const helmet = require('helmet');
const { body, validationResult } = require('express-validator');
const { OAuth2Client } = require('google-auth-library');
const crypto = require('crypto');
require('dotenv').config();

const app = express();

// ============================
// 2. ENVIRONMENT VARIABLES
// ============================

const {
  PORT = 5000,
  MONGODB_URI = 'mongodb://localhost:27017/codolio',
  JWT_SECRET = '9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08',
  JWT_EXPIRES_IN = '14d',
  GOOGLE_CLIENT_ID = '390014223246-stoo8o009sudlcl10c96vfcmbmqvf4co.apps.googleusercontent.com',
  EMAIL_USER = 'devplaza@gmail.com',
  EMAIL_PASS = 'lakadbagga',
  EMAIL_FROM = 'devplaza@gmail.com',
  FRONTEND_URL = 'http://localhost:3000'
} = process.env;

// ============================
// 3. MIDDLEWARE SETUP
// ============================

app.use(helmet());
app.use(cors({
  origin: [FRONTEND_URL, 'https://codolio.com'],
  credentials: true
}));
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true }));

// Rate limiting
const authLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 5, // limit each IP to 5 requests per windowMs
  message: {
    status: {
      code: 429,
      error: 'Too many authentication attempts, please try again later'
    }
  }
});

const otpLimiter = rateLimit({
  windowMs: 60 * 1000, // 1 minute
  max: 3, // limit each IP to 3 OTP requests per minute
  message: {
    status: {
      code: 429,
      error: 'Too many OTP requests, please try again later'
    }
  }
});

// ============================
// 4. DATABASE CONNECTION
// ============================

mongoose.connect(MONGODB_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
})
.then(() => console.log('Connected to MongoDB'))
.catch(err => console.error('MongoDB connection error:', err));

// ============================
// 5. DATABASE SCHEMAS
// ============================

const userSchema = new mongoose.Schema({
  email: {
    type: String,
    required: true,
    unique: true,
    lowercase: true,
    trim: true
  },
  password: {
    type: String,
    required: function() {
      return !this.googleId; // Password not required for Google users
    }
  },
  name: {
    type: String,
    required: true,
    trim: true
  },
  googleId: {
    type: String,
    sparse: true
  },
  avatar: {
    type: String,
    default: ''
  },
  isEmailVerified: {
    type: Boolean,
    default: false
  },
  profile: {
    leetcode: { type: String, default: '' },
    codeforces: { type: String, default: '' },
    codechef: { type: String, default: '' },
    atcoder: { type: String, default: '' },
    github: { type: String, default: '' }
  },
  preferences: {
    theme: { type: String, default: 'light' },
    notifications: { type: Boolean, default: true }
  },
  lastLogin: {
    type: Date,
    default: Date.now
  },
  createdAt: {
    type: Date,
    default: Date.now
  },
  updatedAt: {
    type: Date,
    default: Date.now
  }
});

const otpSchema = new mongoose.Schema({
  email: {
    type: String,
    required: true,
    lowercase: true
  },
  otp: {
    type: String,
    required: true
  },
  type: {
    type: String,
    enum: ['signup', 'password-reset'],
    required: true
  },
  expiresAt: {
    type: Date,
    required: true,
    default: () => new Date(Date.now() + 10 * 60 * 1000) // 10 minutes
  },
  isUsed: {
    type: Boolean,
    default: false
  },
  createdAt: {
    type: Date,
    default: Date.now
  }
});

const passwordResetTokenSchema = new mongoose.Schema({
  email: {
    type: String,
    required: true,
    lowercase: true
  },
  token: {
    type: String,
    required: true
  },
  expiresAt: {
    type: Date,
    required: true,
    default: () => new Date(Date.now() + 30 * 60 * 1000) // 30 minutes
  },
  isUsed: {
    type: Boolean,
    default: false
  },
  createdAt: {
    type: Date,
    default: Date.now
  }
});

// Auto-delete expired documents
otpSchema.index({ expiresAt: 1 }, { expireAfterSeconds: 0 });
passwordResetTokenSchema.index({ expiresAt: 1 }, { expireAfterSeconds: 0 });

const User = mongoose.model('User', userSchema);
const OTP = mongoose.model('OTP', otpSchema);
const PasswordResetToken = mongoose.model('PasswordResetToken', passwordResetTokenSchema);

// ============================
// 6. UTILITIES
// ============================

// Email transporter setup
const transporter = nodemailer.createTransporter({
  service: 'gmail',
  auth: {
    user: EMAIL_USER,
    pass: EMAIL_PASS
  }
});

// Generate OTP
const generateOTP = () => {
  return Math.floor(100000 + Math.random() * 900000).toString();
};

// Generate secure token
const generateSecureToken = () => {
  return crypto.randomBytes(32).toString('hex');
};

// JWT token generation
const generateJWT = (user) => {
  return jwt.sign(
    { 
      User: {
        id: user._id,
        email: user.email,
        name: user.name,
        avatar: user.avatar,
        isEmailVerified: user.isEmailVerified
      }
    },
    JWT_SECRET,
    { expiresIn: JWT_EXPIRES_IN }
  );
};

// Send email function
const sendEmail = async (to, subject, html) => {
  try {
    const mailOptions = {
      from: EMAIL_FROM,
      to,
      subject,
      html
    };
    
    await transporter.sendMail(mailOptions);
    return true;
  } catch (error) {
    console.error('Email sending error:', error);
    return false;
  }
};

// Email templates
const getOTPEmailTemplate = (otp, type) => {
  const purpose = type === 'signup' ? 'verify your email' : 'reset your password';
  
  return `
    <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
      <div style="background-color: #f8f9fa; padding: 20px; text-align: center;">
        <h1 style="color: #333; margin: 0;">Codolio</h1>
      </div>
      <div style="padding: 30px 20px;">
        <h2 style="color: #333; margin-bottom: 20px;">Your OTP Code</h2>
        <p style="color: #666; font-size: 16px; line-height: 1.5;">
          We received a request to ${purpose}. Please use the following OTP code:
        </p>
        <div style="background-color: #f1f3f4; padding: 20px; margin: 20px 0; text-align: center; border-radius: 8px;">
          <h1 style="color: #1a73e8; margin: 0; font-size: 32px; letter-spacing: 5px;">${otp}</h1>
        </div>
        <p style="color: #666; font-size: 14px;">
          This code will expire in 10 minutes. If you didn't request this, please ignore this email.
        </p>
      </div>
      <div style="background-color: #f8f9fa; padding: 20px; text-align: center; font-size: 12px; color: #666;">
        <p>Â© 2024 Codolio. All rights reserved.</p>
      </div>
    </div>
  `;
};

// Google OAuth client
const googleClient = new OAuth2Client(GOOGLE_CLIENT_ID);

// ============================
// 7. MIDDLEWARE
// ============================

// Authentication middleware
const authenticateToken = async (req, res, next) => {
  try {
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1];

    if (!token) {
      return res.status(401).json({
        status: {
          code: 401,
          error: 'Access token required'
        }
      });
    }

    const decoded = jwt.verify(token, JWT_SECRET);
    const user = await User.findById(decoded.User.id);
    
    if (!user) {
      return res.status(401).json({
        status: {
          code: 401,
          error: 'User not found'
        }
      });
    }

    req.user = user;
    next();
  } catch (error) {
    return res.status(403).json({
      status: {
        code: 403,
        error: 'Invalid or expired token'
      }
    });
  }
};

// Validation middleware
const validateRequest = (req, res, next) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(400).json({
      status: {
        code: 400,
        error: 'Validation failed',
        details: errors.array()
      }
    });
  }
  next();
};

// ============================
// 8. AUTH ROUTES
// ============================

// POST /auth/signup/otp - Send OTP for signup
app.post('/auth/signup/otp', 
  otpLimiter,
  [
    body('email').isEmail().normalizeEmail().withMessage('Valid email is required')
  ],
  validateRequest,
  async (req, res) => {
    try {
      const { email } = req.body;

      // Check if user already exists
      const existingUser = await User.findOne({ email });
      if (existingUser) {
        return res.status(409).json({
          status: {
            code: 409,
            error: 'User already exists with this email'
          }
        });
      }

      // Generate and save OTP
      const otp = generateOTP();
      await OTP.findOneAndDelete({ email, type: 'signup' }); // Remove any existing OTP
      
      const newOTP = new OTP({
        email,
        otp,
        type: 'signup'
      });
      await newOTP.save();

      // Send OTP email
      const emailSent = await sendEmail(
        email,
        'Verify Your Email - Codolio',
        getOTPEmailTemplate(otp, 'signup')
      );

      if (!emailSent) {
        return res.status(500).json({
          status: {
            code: 500,
            error: 'Failed to send OTP email'
          }
        });
      }

      res.status(200).json({
        status: {
          code: 200,
          message: 'OTP sent successfully'
        }
      });

    } catch (error) {
      console.error('Signup OTP error:', error);
      res.status(500).json({
        status: {
          code: 500,
          error: 'Internal server error'
        }
      });
    }
  }
);

// POST /user/signup/otp - Verify OTP and complete signup
app.post('/user/signup/otp',
  authLimiter,
  [
    body('email').isEmail().normalizeEmail().withMessage('Valid email is required'),
    body('otp').isLength({ min: 6, max: 6 }).withMessage('OTP must be 6 digits')
  ],
  validateRequest,
  async (req, res) => {
    try {
      const { email, otp } = req.body;

      // Find and validate OTP
      const otpRecord = await OTP.findOne({ 
        email, 
        otp, 
        type: 'signup',
        isUsed: false,
        expiresAt: { $gt: new Date() }
      });

      if (!otpRecord) {
        return res.status(400).json({
          status: {
            code: 400,
            error: 'Invalid or expired OTP'
          }
        });
      }

      // Mark OTP as used
      otpRecord.isUsed = true;
      await otpRecord.save();

      // Create user with email verified
      const user = new User({
        email,
        name: email.split('@')[0], // Default name from email
        isEmailVerified: true,
        lastLogin: new Date()
      });

      await user.save();

      // Generate JWT token
      const token = generateJWT(user);

      res.status(200).json({
        status: {
          code: 200,
          message: 'User created successfully'
        },
        data: {
          id: user._id,
          email: user.email,
          name: user.name,
          isEmailVerified: user.isEmailVerified
        }
      }).header('Authorization', `Bearer ${token}`);

    } catch (error) {
      console.error('Signup verification error:', error);
      res.status(500).json({
        status: {
          code: 500,
          error: 'Internal server error'
        }
      });
    }
  }
);

// POST /auth/login - Login with email and password
app.post('/auth/login',
  authLimiter,
  [
    body('email').isEmail().normalizeEmail().withMessage('Valid email is required'),
    body('password').isLength({ min: 8 }).withMessage('Password must be at least 8 characters')
  ],
  validateRequest,
  async (req, res) => {
    try {
      const { email, password } = req.body;

      // Find user
      const user = await User.findOne({ email });
      if (!user) {
        return res.status(401).json({
          status: {
            code: 401,
            error: 'Invalid email or password'
          }
        });
      }

      // Check if user has a password (not a Google user)
      if (!user.password) {
        return res.status(401).json({
          status: {
            code: 401,
            error: 'Please login with Google or reset your password'
          }
        });
      }

      // Verify password
      const isPasswordValid = await bcrypt.compare(password, user.password);
      if (!isPasswordValid) {
        return res.status(401).json({
          status: {
            code: 401,
            error: 'Invalid email or password'
          }
        });
      }

      // Update last login
      user.lastLogin = new Date();
      await user.save();

      // Generate JWT token
      const token = generateJWT(user);

      res.status(200).json({
        status: {
          code: 200,
          message: 'Login successful'
        },
        data: {
          id: user._id,
          email: user.email,
          name: user.name,
          avatar: user.avatar,
          isEmailVerified: user.isEmailVerified,
          lastLogin: user.lastLogin
        }
      }).header('Authorization', `Bearer ${token}`);

    } catch (error) {
      console.error('Login error:', error);
      res.status(500).json({
        status: {
          code: 500,
          error: 'Internal server error'
        }
      });
    }
  }
);

// POST /auth/login/social - Google OAuth login
app.post('/auth/login/social',
  authLimiter,
  async (req, res) => {
    try {
      const { authToken } = req.headers;
      const { provider } = req.headers;

      if (provider !== 'google') {
        return res.status(400).json({
          status: {
            code: 400,
            error: 'Only Google OAuth is supported'
          }
        });
      }

      // Verify Google token
      const ticket = await googleClient.verifyIdToken({
        idToken: authToken,
        audience: GOOGLE_CLIENT_ID
      });

      const payload = ticket.getPayload();
      const { sub: googleId, email, name, picture } = payload;

      // Check if user exists
      let user = await User.findOne({ $or: [{ googleId }, { email }] });
      let newUser = false;

      if (!user) {
        // Create new user
        user = new User({
          email,
          name,
          googleId,
          avatar: picture || '',
          isEmailVerified: true,
          lastLogin: new Date()
        });
        await user.save();
        newUser = true;
      } else {
        // Update existing user
        if (!user.googleId) {
          user.googleId = googleId;
        }
        if (!user.avatar && picture) {
          user.avatar = picture;
        }
        user.lastLogin = new Date();
        await user.save();
      }

      // Generate JWT token
      const token = generateJWT(user);

      res.status(200).json({
        status: {
          code: 200,
          message: newUser ? 'Account created successfully' : 'Login successful'
        },
        data: {
          newUser,
          id: user._id,
          email: user.email,
          name: user.name,
          avatar: user.avatar,
          isEmailVerified: user.isEmailVerified
        }
      }).header('Authorization', `Bearer ${token}`);

    } catch (error) {
      console.error('Social login error:', error);
      res.status(500).json({
        status: {
          code: 500,
          error: 'Social login failed'
        }
      });
    }
  }
);

// POST /otp - Send OTP for password reset
app.post('/otp',
  otpLimiter,
  async (req, res) => {
    try {
      const { email } = req.query;

      if (!email) {
        return res.status(400).json({
          status: {
            code: 400,
            error: 'Email is required'
          }
        });
      }

      // Check if user exists
      const user = await User.findOne({ email: email.toLowerCase() });
      if (!user) {
        return res.status(404).json({
          status: {
            code: 404,
            error: 'No account found with this email'
          }
        });
      }

      // Generate and save OTP
      const otp = generateOTP();
      await OTP.findOneAndDelete({ email: email.toLowerCase(), type: 'password-reset' });
      
      const newOTP = new OTP({
        email: email.toLowerCase(),
        otp,
        type: 'password-reset'
      });
      await newOTP.save();

      // Send OTP email
      const emailSent = await sendEmail(
        email,
        'Reset Your Password - Codolio',
        getOTPEmailTemplate(otp, 'password-reset')
      );

      if (!emailSent) {
        return res.status(500).json({
          status: {
            code: 500,
            error: 'Failed to send OTP email'
          }
        });
      }

      res.status(200).json({
        status: {
          code: 200,
          message: 'OTP sent successfully'
        }
      });

    } catch (error) {
      console.error('Password reset OTP error:', error);
      res.status(500).json({
        status: {
          code: 500,
          error: 'Internal server error'
        }
      });
    }
  }
);

// POST /otp/validate - Validate OTP for password reset
app.post('/otp/validate',
  authLimiter,
  [
    body('email').isEmail().normalizeEmail().withMessage('Valid email is required'),
    body('otp').isLength({ min: 6, max: 6 }).withMessage('OTP must be 6 digits')
  ],
  validateRequest,
  async (req, res) => {
    try {
      const { email, otp } = req.body;

      // Find and validate OTP
      const otpRecord = await OTP.findOne({ 
        email, 
        otp, 
        type: 'password-reset',
        isUsed: false,
        expiresAt: { $gt: new Date() }
      });

      if (!otpRecord) {
        return res.status(400).json({
          status: {
            code: 400,
            error: 'Invalid or expired OTP'
          }
        });
      }

      // Mark OTP as used
      otpRecord.isUsed = true;
      await otpRecord.save();

      // Generate password reset token
      const resetToken = generateSecureToken();
      await PasswordResetToken.findOneAndDelete({ email });
      
      const passwordResetToken = new PasswordResetToken({
        email,
        token: resetToken
      });
      await passwordResetToken.save();

      res.status(200).json({
        status: {
          code: 200,
          message: 'OTP verified successfully'
        },
        data: {
          resetToken
        }
      });

    } catch (error) {
      console.error('OTP validation error:', error);
      res.status(500).json({
        status: {
          code: 500,
          error: 'Internal server error'
        }
      });
    }
  }
);

// PUT /user/password/reset - Reset password with token
app.put('/user/password/reset',
  authLimiter,
  [
    body('token').isLength({ min: 32 }).withMessage('Valid reset token is required'),
    body('newPassword').isLength({ min: 8 }).withMessage('Password must be at least 8 characters')
  ],
  validateRequest,
  async (req, res) => {
    try {
      const { token, newPassword } = req.body;

      // Find and validate reset token
      const resetTokenRecord = await PasswordResetToken.findOne({ 
        token,
        isUsed: false,
        expiresAt: { $gt: new Date() }
      });

      if (!resetTokenRecord) {
        return res.status(400).json({
          status: {
            code: 400,
            error: 'Invalid or expired reset token'
          }
        });
      }

      // Find user
      const user = await User.findOne({ email: resetTokenRecord.email });
      if (!user) {
        return res.status(404).json({
          status: {
            code: 404,
            error: 'User not found'
          }
        });
      }

      // Hash new password
      const hashedPassword = await bcrypt.hash(newPassword, 12);

      // Update user password
      user.password = hashedPassword;
      user.updatedAt = new Date();
      await user.save();

      // Mark reset token as used
      resetTokenRecord.isUsed = true;
      await resetTokenRecord.save();

      res.status(200).json({
        status: {
          code: 200,
          message: 'Password reset successfully'
        }
      });

    } catch (error) {
      console.error('Password reset error:', error);
      res.status(500).json({
        status: {
          code: 500,
          error: 'Internal server error'
        }
      });
    }
  }
);

// ============================
// 9. USER ROUTES
// ============================

// GET /user/profile - Get user profile
app.get('/user/profile', authenticateToken, async (req, res) => {
  try {
    const user = await User.findById(req.user._id).select('-password');
    
    res.status(200).json({
      status: {
        code: 200,
        message: 'Profile retrieved successfully'
      },
      data: user
    });
  } catch (error) {
    console.error('Get profile error:', error);
    res.status(500).json({
      status: {
        code: 500,
        error: 'Internal server error'
      }
    });
  }
});

// PUT /user/profile - Update user profile
app.put('/user/profile', 
  authenticateToken,
  [
    body('name').optional().isLength({ min: 2 }).withMessage('Name must be at least 2 characters'),
    body('profile.leetcode').optional().isString(),
    body('profile.codeforces').optional().isString(),
    body('profile.codechef').optional().isString(),
    body('profile.atcoder').optional().isString(),
    body('profile.github').optional().isString()
  ],
  validateRequest,
  async (req, res) => {
    try {
      const allowedUpdates = ['name', 'profile', 'preferences'];
      const updates = Object.keys(req.body);
      const isValidOperation = updates.every(update => allowedUpdates.includes(update));

      if (!isValidOperation) {
        return res.status(400).json({
          status: {
            code: 400,
            error: 'Invalid updates'
          }
        });
      }

      const user = await User.findById(req.user._id);
      
      updates.forEach(update => {
        if (update === 'profile' || update === 'preferences') {
          user[update] = { ...user[update], ...req.body[update] };
        } else {
          user[update] = req.body[update];
        }
      });

      user.updatedAt = new Date();
      await user.save();

      res.status(200).json({
        status: {
          code: 200,
          message: 'Profile updated successfully'
        },
        data: user
      });

    } catch (error) {
      console.error('Update profile error:', error);
      res.status(500).json({
        status: {
          code: 500,
          error: 'Internal server error'
        }
      });
    }
  }
);

// POST /user/logout - Logout user
app.post('/user/logout', authenticateToken, async (req, res) => {
  try {
    // In a more complex setup, you might want to blacklist the token
    // For now, we'll just return success as the client will remove the token
    
    res.status(200).json({
      status: {
        code: 200,
        message: 'Logged out successfully'
      }
    });
  } catch (error) {
    console.error('Logout error:', error);
    res.status(500).json({
      status: {
        code: 500,
        error: 'Internal server error'
      }
    });
  }
});

// ============================
// 10. HEALTH CHECK AND ERROR HANDLING
// ============================

// Health check endpoint
app.get('/health', (req, res) => {
  res.status(200).json({
    status: 'OK',
    timestamp: new Date().toISOString(),
    uptime: process.uptime()
  });
});

// 404 handler
app.use('*', (req, res) => {
  res.status(404).json({
    status: {
      code: 404,
      error: 'Route not found'
    }
  });
});

// Global error handler
app.use((error, req, res, next) => {
  console.error('Global error:', error);
  
  if (error.name === 'ValidationError') {
    return res.status(400).json({
      status: {
        code: 400,
        error: 'Validation error',
        details: error.message
      }
    });
  }

  if (error.name === 'MongoError' && error.code === 11000) {
    return res.status(409).json({
      status: {
        code: 409,
        error: 'Duplicate entry'
      }
    });
  }

  res.status(500).json({
    status: {
      code: 500,
      error: 'Internal server error'
    }
  });
});

// ============================
// 11. SERVER START
// ============================

app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
  console.log(`Health check: http://localhost:${PORT}/health`);
});

module.exports = app;